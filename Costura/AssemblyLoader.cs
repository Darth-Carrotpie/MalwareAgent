// Decompiled with JetBrains decompiler
// Type: Costura.AssemblyLoader
// Assembly: service-nankasa.com-LoggerBin, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 762D1AAC-A39C-4AEB-81B7-3308162A414F
// Assembly location: C:\Users\darbinis\Desktop\Code analysis\Mallicious skriptai\Atack 09-17\RegAsm.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace Costura
{
  [CompilerGenerated]
  internal static class AssemblyLoader
  {
    private static object nullCacheLock;
    private static Dictionary<string, bool> nullCache;
    private static Dictionary<string, string> assemblyNames;
    private static Dictionary<string, string> symbolNames;
    private static int isAttached;
    private static AssemblyLoader vau;

    private static string CultureToString(CultureInfo culture) => culture == null ? "" : culture.Name;

    private static Assembly ReadExistingAssembly(AssemblyName name)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      Assembly[] assemblies;
      while (true)
      {
        switch (num2)
        {
          case 1:
            // ISSUE: reference to a compiler-generated method
            assemblies = ((AppDomain) AssemblyLoader.pdB()).GetAssemblies();
            // ISSUE: reference to a compiler-generated method
            if (AssemblyLoader.uaz() == null)
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          default:
            goto label_3;
        }
      }
label_3:
      for (int index = 0; index < assemblies.Length; ++index)
      {
        Assembly assembly = assemblies[index];
        AssemblyName name1 = assembly.GetName();
        if (string.Equals(name1.Name, name.Name, StringComparison.InvariantCultureIgnoreCase) && string.Equals(kIa.bx(name1.CultureInfo, kIa.OIv), kIa.bx(name.CultureInfo, kIa.OIv), StringComparison.InvariantCultureIgnoreCase))
          return assembly;
      }
      return (Assembly) null;
    }

    private static void CopyTo(Stream source, Stream destination)
    {
      byte[] buffer = new byte[81920];
      int count;
      while ((count = source.Read(buffer, 0, buffer.Length)) != 0)
        destination.Write(buffer, 0, count);
    }

    private static Stream LoadStream(string fullName)
    {
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if (!fullName.EndsWith(w4.bx(22042, w4.vY)))
        return executingAssembly.GetManifestResourceStream(fullName);
      using (Stream manifestResourceStream = executingAssembly.GetManifestResourceStream(fullName))
      {
        using (DeflateStream deflateStream = new DeflateStream(manifestResourceStream, CompressionMode.Decompress))
        {
          MemoryStream memoryStream = new MemoryStream();
          OIc.bx((Stream) deflateStream, (Stream) memoryStream, OIc.mIL);
          memoryStream.Position = 0L;
          return (Stream) memoryStream;
        }
      }
    }

    private static Stream LoadStream(Dictionary<string, string> resourceNames, string name)
    {
      string fullName;
      return resourceNames.TryGetValue(name, out fullName) ? LIb.bx(fullName, LIb.WIy) : (Stream) null;
    }

    private static byte[] ReadStream(Stream stream)
    {
      byte[] buffer = new byte[stream.Length];
      stream.Read(buffer, 0, buffer.Length);
      return buffer;
    }

    private static Assembly ReadFromEmbeddedResources(
      Dictionary<string, string> assemblyNames,
      Dictionary<string, string> symbolNames,
      AssemblyName requestedAssemblyName)
    {
      string name = requestedAssemblyName.Name.ToLowerInvariant();
      if (requestedAssemblyName.CultureInfo != null && !string.IsNullOrEmpty(requestedAssemblyName.CultureInfo.Name))
        name = requestedAssemblyName.CultureInfo.Name + w4.bx(286, w4.vY) + name;
      byte[] rawAssembly;
      using (Stream stream = vIQ.bx(assemblyNames, name, vIQ.MI6))
      {
        if (stream == null)
          return (Assembly) null;
        rawAssembly = JIi.bx(stream, JIi.uIR);
      }
      using (Stream stream = vIQ.bx(symbolNames, name, vIQ.MI6))
      {
        if (stream != null)
        {
          byte[] rawSymbolStore = JIi.bx(stream, JIi.uIR);
          return Assembly.Load(rawAssembly, rawSymbolStore);
        }
      }
      return Assembly.Load(rawAssembly);
    }

    public static Assembly ResolveAssembly(object sender, ResolveEventArgs e)
    {
      // ISSUE: reference to a compiler-generated field
      lock (AssemblyLoader.nullCacheLock)
      {
        // ISSUE: reference to a compiler-generated field
        if (AssemblyLoader.nullCache.ContainsKey(e.Name))
          return (Assembly) null;
      }
      AssemblyName assemblyName = new AssemblyName(e.Name);
      Assembly assembly1 = oI8.bx(assemblyName, oI8.oIX);
      if (assembly1 != (Assembly) null)
        return assembly1;
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      Assembly assembly2 = QIS.bx(AssemblyLoader.assemblyNames, AssemblyLoader.symbolNames, assemblyName, QIS.DIN);
      // ISSUE: reference to a compiler-generated method
      if (AssemblyLoader.ldH((object) assembly2, (object) null))
      {
        // ISSUE: reference to a compiler-generated field
        lock (AssemblyLoader.nullCacheLock)
        {
          // ISSUE: reference to a compiler-generated field
          AssemblyLoader.nullCache[e.Name] = true;
        }
        if ((assemblyName.Flags & AssemblyNameFlags.Retargetable) != AssemblyNameFlags.None)
        {
          int num1 = 0;
          // ISSUE: reference to a compiler-generated method
          if (!AssemblyLoader.DaW())
            goto label_17;
label_1:
          switch (num1)
          {
            default:
              assembly2 = Assembly.Load(assemblyName);
              goto label_13;
          }
label_17:
          int num2;
          num1 = num2;
          goto label_1;
        }
      }
label_13:
      return assembly2;
    }

    static AssemblyLoader()
    {
      yd.bx(yd.EI);
      // ISSUE: reference to a compiler-generated field
      AssemblyLoader.nullCacheLock = new object();
      // ISSUE: reference to a compiler-generated field
      AssemblyLoader.nullCache = new Dictionary<string, bool>();
      // ISSUE: reference to a compiler-generated field
      AssemblyLoader.assemblyNames = new Dictionary<string, string>();
      // ISSUE: reference to a compiler-generated field
      AssemblyLoader.symbolNames = new Dictionary<string, string>();
      // ISSUE: reference to a compiler-generated field
      AssemblyLoader.assemblyNames.Add(w4.bx(22068, w4.vY), w4.bx(22086, w4.vY));
      // ISSUE: reference to a compiler-generated field
      AssemblyLoader.assemblyNames.Add(w4.bx(22150, w4.vY), w4.bx(22184, w4.vY));
    }

    public static void Attach()
    {
      // ISSUE: reference to a compiler-generated field
      if (Interlocked.Exchange(ref AssemblyLoader.isAttached, 1) == 1)
        return;
      AppDomain.CurrentDomain.AssemblyResolve += (ResolveEventHandler) ((sender, e) =>
      {
        // ISSUE: reference to a compiler-generated field
        lock (AssemblyLoader.nullCacheLock)
        {
          // ISSUE: reference to a compiler-generated field
          if (AssemblyLoader.nullCache.ContainsKey(e.Name))
            return (Assembly) null;
        }
        AssemblyName assemblyName = new AssemblyName(e.Name);
        Assembly assembly1 = oI8.bx(assemblyName, oI8.oIX);
        if (assembly1 != (Assembly) null)
          return assembly1;
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        Assembly assembly2 = QIS.bx(AssemblyLoader.assemblyNames, AssemblyLoader.symbolNames, assemblyName, QIS.DIN);
        // ISSUE: reference to a compiler-generated method
        if (AssemblyLoader.ldH((object) assembly2, (object) null))
        {
          // ISSUE: reference to a compiler-generated field
          lock (AssemblyLoader.nullCacheLock)
          {
            // ISSUE: reference to a compiler-generated field
            AssemblyLoader.nullCache[e.Name] = true;
          }
          if ((assemblyName.Flags & AssemblyNameFlags.Retargetable) != AssemblyNameFlags.None)
          {
            int num1 = 0;
            // ISSUE: reference to a compiler-generated method
            if (!AssemblyLoader.DaW())
              goto label_17;
label_1:
            switch (num1)
            {
              default:
                assembly2 = Assembly.Load(assemblyName);
                goto label_13;
            }
label_17:
            int num2;
            num1 = num2;
            goto label_1;
          }
        }
label_13:
        return assembly2;
      });
    }

    internal static bool DaW() => AssemblyLoader.vau == null;

    internal static AssemblyLoader uaz() => AssemblyLoader.vau;

    internal static object pdB() => (object) AppDomain.CurrentDomain;

    internal static bool ldH([In] object obj0, [In] object obj1) => (Assembly) obj0 == (Assembly) obj1;
  }
}
